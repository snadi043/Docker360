<!-- This project main focus will be on how an application which is created and developed locally on the developers local machine (environment) is configured to deploy in cloud and host the web application to the users. The complete details, architecture flow and tech stack are described below. -->

<!-- Tech Stack  -->

    - Node JS framework
    - Docker
    - Dockerhub
    - AWS EC2
    - SSH Configuration 
    - Github
    - REST API
   
<!-- ARCHITECTURE FLOW  -->

The main application which is basically a NODE based normal application which has REST API's and endpoints to build the communication in between the backend code and the local node server which handle CRUD operations using HTTP methods like GET,POST,UPDATE and DELETE.

To make all the version changes and code commits this project is integrated with GITHUB and the repository for the application is 
https://github.com/snadi043/Docker360.git

Also, to make this project easy to ship and make it able to run in the same way in all environments, it is build and integrated with Containerization Tool which is DOCKER and the image and container details are defined below.
    Docker image : docker-prod-container-cloud-deployment
    Docker container: docker-prod-cloud-deploy

Once, all the above steps are done, the application is then deployed in AWS cloud platform using EC2 service to configure the app with all the security, access control and hosting.
    Detailed Steps include:
        - Configuring an AWS EC2 Instance with all the specifications dealing with (OS, RAM, STORAGE, NETWORKING etc.)
        - Configuring the proper access to make sure who can use the application, in a way to control the traffic and implement a layer of security to the application.
        -  Launching the instance.

Finally, after the application is integrated with docker and the final image is locked, the application is then deployed into the above created AWS EC2 instance to host in the cloud using SSH (Secure Shell) and then install DOCKER in the EC2 Instance and run the image in that instance. The commands and the setup for the instance and the shell connection are defined below.
    - Instance ID - i-0b5f4225781edcef5 (node-app-cloud-deploy)
    - Open an SSH client. (For Linux and MacOS it is already enabled in the sytem).
    - Place the private key file generated when creating the instance in root directory of the project.
    - Run this command, if necessary, to ensure your key is not publicly viewable.
            chmod 400 "permission file name"
    - Connect to your instance using its Public DNS:
            ec2-3-147-79-144.us-east-2.compute.amazonaws.com

Example:
ssh -i "node-app-cloud-deploy.pem" ec2-user@ec2-3-147-79-144.us-east-2.compute.amazonaws.com

Installing the Docker application in the remote machine which is on above created AWS EC2 instance.
The steps to follow to install the docker remotely is as follows.
    - sudo yum update -y
    - sudo yum -y install docker
    - sudo service docker start
    - sudo usermod -a -G docker ec2-user
    # Make sure to log out + back in after running these commands.
    - sudo systemctl enable docker
    - docker version
After running the docker version command it has to display all the docker information installed in the remote istance.

Deploying the source code from the local machine into the remote machine which is the AWS EC2 instance created in the above steps.
- This process can be done in two steps
  1. Migrating the source code directly from the local machine to remote machine and then building an image and run the conatainer in the remote machine using the docker application which is installed previously with SSH commands.
  2. Building the docker image and the container in the local machine and then migrating the source code through the already build docker image to the dockerhub by creating a repository in the dockerhub and then running that image in our remote machine. (AWS EC2 instance).
- When using the step-1, there are lot of configurations and steps the developer has to deal with, which is cumbersome.
- So, the best and most optimized solution is to follow step-2.

Steps and Procedure involved while deploying the source code from local machine into the remote remote machine based on procedure explained in line 56.
    - Signing to your dockerhub account.
    - Create a new repository with the matchable project name.
    - Build an image in your local machine and then assign a tag to that image which matches the remote dockerhub project name.
    - Create a connection from the local docker terminal to dockerhub in the browser with username/password or code confirmation mechanism
    - Push the image to the dockerhub with the displayed docker push command in the dockerhub.
            In this project it is as follows
            docker push snadi043/node-app-cloud-deploy:dockerhub